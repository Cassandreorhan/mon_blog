---
title: "Les jeux olympiques : médailles des athlètes"
author: "Cassandre Orhan"
date: "2024-03-07"
---

L'objectif de ce rapport est d'analyser les performances des athlètes aux Jeux Olympiques en termes d'éditions et de médailles remportées. Cette analyse nous permettra de comprendre les tendances historiques en matière de succès sportifs et d'identifier les pays dominants dans l'histoire des Jeux Olympiques.

## Librairie

Dans le cadre de ce rapport, nous nous appuierons sur des bibliothèques disponibles dans le CRAN.

```{r}
library(rvest)
library(purrr)
library(stringr)
library(tibble)
```

## Préparation de la base de données

Nous avons dans un premier temps importé notre base de données :

```{r}
list_tables <-
  session(
    "https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques")|> 
  html_elements(".wikitable") |>
  html_table()
```

L'objet `list_tables` contient les données de toutes les tables HTML de classe "wikitable" trouvées sur la page Wikipedia spécifiée. Dans ce cas, il contient la liste des médaillés olympiques selon six tables distinctes :

-   Sports des Jeux Olympiques d'été

-   Sports des Jeux Olympiques d'hiver

-   Anciens sports d'été

-   Anciens sports d'hiver

-   Par édition, Jeux Olympiques d'été

-   Par édition, Jeux Olympiques d'hiver

Ces différentes tables contiennent des informations sur les médailles olympiques attribuées aux athlètes dans différentes disciplines et éditions des Jeux Olympiques,

## Médaillés des jeux olympiques d'été

La première étape de cet exercice consistait à préparer la base de données en supprimant les lignes et les colonnes inutiles, ainsi qu'en renommant les colonnes et les lignes pour plus de lisibilité. Cette étape est essentielle pour assurer que les données sont bien organisées et faciles à analyser par la suite. En nettoyant la base de données et en la structurant de manière claire, nous pouvons faciliter les étapes d'analyse et d'interprétation des données

```{r}
sport_ete <- data.frame(list_tables[1])

sport_ete <- sport_ete[-1,-1]

names(sport_ete)<-c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or")

sport_ete[c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")] <- lapply(sport_ete[c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")], as.integer)

sport_ete$Athletes_or <- ifelse(sport_ete$Athletes_or == "17 athlètes avec 1 médaille d'or", "Chandler Egan (USA) (1-1-0)", sport_ete$Athletes_or)
sport_ete$Athletes_or [c(30)] <- "Dezső Gyarmati (HUN) (3-1-1)"

str(sport_ete)
dim(sport_ete)
knitr::kable(head(sport_ete))
```

Cette base de données, référençant les médaillés pour les Jeux Olympiques d'été, est composée de 10 colonnes et 30 lignes. Les colonnes sont :

-   Les disciplines pratiquées,

-   Des informations sur leurs années d'édition, depuis quand ? Est ce qu'il y a eu des coupures ?

-   Le nombre d'éditions,

-   Le nombre d'épreuves durant la dernière édition correspondant à 2020,

-   Le nombre de médailles d'or, d'argent et de bronze ainsi que le total de médailles,

-   Les athlètes médaillés ainsi que les athlètes ayant obtenu au moins une médaille d'or.

## Disciplines avec le plus de médailles distribués

L'objectif de ce code est de déterminer le top 3 des disciplines avec le plus grand nombre de médailles distribuées aux Jeux Olympiques. Pour ce faire, nous commençons par trier la colonne contenant le nombre total de médailles dans un ordre croissant. Ensuite, nous sélectionnons les trois disciplines les plus pertinentes pour notre analyse.

```{r}
max_tt<-max(sport_ete$Total)
top_3 <- head(sport_ete[order(sport_ete$Total, decreasing = TRUE), ], 3)
knitr::kable(top_3[c(1,8)])
```

Nous constatons ainsi que les disciplines avec le plus grand nombre de médailles distribuées sont l'athlétisme, la natation et la lutte.

## Disciplines avec le moins de d'épreuve en 2020

L'objectif de ce code est de trier les disciplines en fonction du nombre d'épreuves le moins élevé lors des Jeux Olympiques de 2020, on effectue un trie dans un ordre décroissant. En effectuant ce tri, nous pouvons identifier les disciplines qui ont eu moins de représentation ou de diversité d'épreuves lors de la dernière édition des Jeux Olympiques

```{r}
epreuves_2020<-head(sport_ete[order(sport_ete$Epreuves_2020,decreasing=FALSE),])
knitr::kable(epreuves_2020[c(1,4)])
```

Ainsi, parmi les disciplines ayant été les moins représentées lors de l'édition des Jeux Olympiques de 2020, on retrouve notamment le football et le golf.

## Fonction calcul_nb_edition.int

Le but de cette fonction est de calculer le nombre d'éditions auxquelles une épreuve a été présente aux Jeux Olympiques pour les années données. Pour ce faire, la fonction effectue les étapes suivantes :

-   Soustrait l'année donnée de 2020.

-   Divise le résultat par la fréquence des Jeux Olympiques, qui correspond à 4 car les Jeux ont lieu tous les quatre ans.

-   Ajoute une édition supplémentaire pour l'édition 2020.

-   Tient compte des éditions qui n'ont pas eu lieu, notamment en raison des guerres mondiales.

Cette fonction ne prend en compte que des caractères numériques en entrée.

```{r}
calcul_nb_editions.int <- function(depuis) {
 
  editions <- (((2020-depuis) / 4) +1)
  
  if (depuis <= 1916) {
    editions <- editions - 3
  } else if (depuis <= 1940){
        editions <- editions - 2}
      else if (depuis <= 1944){ 
        editions <- editions - 1}
  
  return(editions)
}

calcul_nb_editions.int(1920)
```

Donc, pour une épreuve présente depuis 1920, la fonction dénombrera 24 éditions au total.

## Fonction calcul_nb_edition.str

On a repris la fonction qui permet de calculer le nombre d'édition mais on l'adapte maintenant au chaîne de caractère. La fonction prend donc en compte trois possibilités pour les chaînes de caractères représentant les années :

-   Si l'année indiquée est de la forme "1904-1924", alors la fonction soustrait 1904 de 1924, divise le résultat par la fréquence des Jeux Olympiques, et ajoute "+1" pour l'année 1924.

-   Si l'année indiquée est de la forme "depuis 1904" (ou "Depuis"), la fonction fonctionnera de la même manière que pour le calcul standard du nombre d'éditions.

-   Si l'année indiquée est unique, la fonction comptera simplement une édition supplémentaire.

Cette fonction continue de prendre en compte les années où les Jeux Olympiques n'ont pas eu lieu en raison des guerres mondiales, afin de fournir un calcul précis du nombre d'éditions pour une épreuve donnée.

```{r}
calcul_nb_editions.str <- function(annees) {
 
  annees <- gsub("\\s+", "", annees)
  years <- unlist(strsplit(annees, ","))

 
  nb_editions <- 0

  
  for (annee in years) {
    if (grepl("-", annee)) {
      range <- as.numeric(unlist(strsplit(annee, "-")))
      nb_editions <- nb_editions + (((range[2] - range[1]) %/% 4 )+1)
      
     
      if (range[2] >= 1944) nb_editions <- nb_editions - 3
      else if (range[2] >= 1940) nb_editions <- nb_editions - 2
      else if (range[2] >= 1916) nb_editions <- nb_editions - 1
    } 
    
    else if (grepl("depuis", tolower(annee))) {
      debut <- as.numeric(gsub("[^0-9]", "", annee))
      nb_editions <- nb_editions + ((2024 - debut) %/% 4)
    
      if (debut <= 1916) nb_editions <- nb_editions - 3
      else if (debut <= 1940) nb_editions <- nb_editions - 2
      else if (debut <= 1944) nb_editions <- nb_editions - 1
    } else {
      
     
      nb_editions <- nb_editions + 1
    }
  }

  return(nb_editions)
}
nb_editions <-calcul_nb_editions.str("1896, 1904, depuis 1920")
nb_editions
```

Par exemple, si l'on indique qu'une discipline a été présente aux JO en 1896, 1904 et depuis 1920, alors la fonction a compté 2 dates uniques et ajouté le nombre d'éditions calculé avec "depuis 1920". Ici, la fonction nous retourne 26 éditions.

## Fonction calcul_nb_edition

Notre fonction permet donc de calculer le nombre d'éditions auxquelles une discipline est présente aux JO, que l'on renseigne une année précise ou une chaîne de caractères.

```{r}
calcul_nb_editions <- function(x) {
  if(is.character(x)) {
    calcul_nb_editions.str(x)
  } else if(is.numeric(x)) {
    calcul_nb_editions.int(x)
  }
}

calcul_nb_editions("1904-1924, depuis 1948")
calcul_nb_editions(2000)
```

Ainsi, la fonction nous retourne 24 éditions pour la chaîne de caractère "1904-1924, depuis 1948" et 6 éditions pour l'année 2000.

## Fonction calcul_medailles_individuelles

L'objectif de cette fonction est de fournir le nombre maximal de médailles obtenues par un athlète lors des olympiades dans une même cellule. Cette fonction prend en compte la possibilité que plusieurs athlètes puissent être mentionnés et permet ainsi de les distinguer. Elle identifie le nombre maximal de médailles attribuées à un seul athlète au sein d'une cellule donnée, offrant ainsi une analyse claire et précise des performances individuelles aux Jeux Olympiques.

```{r}
calcul_medailles_individuelles <- function(data){ 
  athletes <- unlist(str_split(data,"\\)\\s",simplify=TRUE))
  resultats <- numeric(length(athletes))
  
  for (i in seq_along(athletes)){
    medailles <- str_extract_all(athletes[i],"\\d+")
    
    if (length(medailles[[1]])>0){
      chiffres<- as.integer(medailles[[1]])
      resultats[i] <-sum(chiffres)
    }
  }
  
return(resultats[resultats !=0])

}

calcul_medailles_individuelles(c("Larissa Latynina (URS) (9-5-4)", "Teddy Riner (FRA) (3-0-2) Ryōko Tani (JPN) (2-2-1)","Elisabeta Lipă (ROU) (5-2-1)","	
Isabell Werth (GER) (7-5-0)","Ana Fernández (CUB) (3-0-1) Kerri Walsh (USA) (3-0-1) Inna Ryskal (URS) (2-2-0) Sérgio Dutra Santos (BRA) (2-2-0) Sergey Tetyukhin (RUS) (1-1-2)"))
```

Ainsi, Larissa Latynina a reçu 18 médailles, Teddy Riner en a reçu 5, etc.

À présent, nous souhaitons identifier les 3 athlètes ayant reçu le plus de médailles en appliquant la fonction précédemment créée à toute la colonne "Athletes_medailles". Cela nous permettra de déterminer le nombre de médailles reçues par chacun des athlètes, facilitant ainsi l'identification des trois athlètes les plus médaillés.

```{r}
resultats_medailles_ete <- lapply(sport_ete$Athletes_medailles,calcul_medailles_individuelles)
head(resultats_medailles_ete)
```

Nous pouvons donc à présent déterminer les athlètes ayant reçu le plus de médailles. Pour cela, nous utilisons un code qui parcourt les résultats des médailles d'été pour chaque sport, extrait les noms des athlètes et le nombre de médailles correspondantes, puis les stocke dans un tibble. Enfin, il rassemble tous les résultats dans une liste, les combine en un seul tibble et identifie les trois athlètes avec le plus grand nombre de médailles d'été.

```{r}
list_medaille_ete <- list()

for (i in seq_along(resultats_medailles_ete)) {
  matches <- str_match_all(sport_ete$Athletes_medailles[i],"([^\\(]+\\s\\([^\\)]+\\))\\s*\\((\\d+)-(\\d+)-(\\d+)\\)")
  
  df<- tibble(
    Athlete = trimws(matches[[1]][,1]),
    Medailles=resultats_medailles_ete[[i]]
)
  list_medaille_ete[[i]]<-df
}

top_medailles_ete<-do.call(rbind,list_medaille_ete)
knitr::kable(head(top_medailles_ete))

top_3_medailles_ete <- head(top_medailles_ete[order(top_medailles_ete$Medailles, decreasing = TRUE), ], 3)
knitr::kable(top_3_medailles_ete)
```

Ainsi, nous apprenons que les athlètes ayant reçu le plus de médailles sont Michael Phelps avec 28 médailles, suivi de Larissa Latynina avec 18 médailles à la deuxième place, et pour terminer Edoardo Mangiarotti avec 13 médailles.

## Fonction extraire_nationalite_athlete

Le but de cette fonction est d'extraire la nationalité des athlètes afin d'analyser la présence des différentes nationalités. Pour cela,on utilise des expressions régulières pour extraire les segments entre parenthèses représentant les nationalités des athlètes, puis on compte le nombre d'occurrences de chaque nationalité et on retourne le résultat.

```{r}
extraire_nationalite_athlete <- function(chaine) {
  segments <- unlist(str_extract_all(chaine, "\\([^\\)]+\\)"))
  nationalites <- character(length = length(segments))
  
  for (i in seq_along(segments)) {
    matches <- str_match(segments[i], "\\((\\w{3})\\)$")
    if (!is.na(matches[2])) {
      nationalites[i] <- matches[2]
    }
  }
  
  counts <- table(nationalites)
  
  return(counts)
}

knitr::kable(extraire_nationalite_athlete(c("László Papp (HUN) (3-0-0) Félix Savón (CUB) (3-0-0) Teófilo Stevenson (CUB) (3-0-0)","Aladár Gerevich (HUN) (7-1-2)
","Christie Rampone (USA) (3-1-0) Shannon Boxx (USA) (3-0-0) Heather Mitts (USA) (3-0-0) Heather O'Reilly (USA) (3-0-0)
")))
```

Avant de déterminer quelles nationalités sont les plus présentes, nous devons appliquer la fonction à l'ensemble de notre jeu de données.

```{r}
resultat_nationalite_ete <- lapply(sport_ete$Athletes_or,extraire_nationalite_athlete)
head(resultat_nationalite_ete)
```

Nous pouvons donc à présent déterminer la nationalité la plus présente parmi les athlètes. De la même manière que pour la fonction calcul_medailles_individuelles, nous utilisons un code qui parcourt les résultats des médailles d'or pour chaque sport d'été, extrait les nationalités des athlètes et compte le nombre total d'occurrences de chaque nationalité. Ensuite, il crée un tibble pour stocker ces données et les assemble dans une liste. Enfin, il combine tous les résultats en un seul tibble, agrège le total des occurrences par nationalité, puis identifie les trois nationalités les plus présentes.

```{r}
list_nationalite_ete <- list()

for (i in seq_along(sport_ete$Athletes_or)) {
  matches <- str_match_all(sport_ete$Athletes_or[i], "\\((\\w{3})\\)")
  
  nationalites_ete <- matches[[1]][,2]
  
  total_occurrences <- table(nationalites_ete)
  
  df <- tibble(
    Nationalite = names(total_occurrences),
    Total = as.integer(total_occurrences)
  )
  
  list_nationalite_ete[[i]] <- df
}

top_nationalites_ete <- do.call(rbind, list_nationalite_ete)

top_nationalites_ete <- aggregate(Total ~ Nationalite, data = top_nationalites_ete, sum)

top_3_nationalites_ete <- head(top_nationalites_ete[order(top_nationalites_ete$Total, decreasing = TRUE), ], 3)
knitr::kable(top_3_nationalites_ete)

```

Ainsi, nous apprenons que les nationalités les plus présentes sont les États-Unis avec 21 athlètes médaillés d'or, suivis par la Chine avec 13, et enfin Cuba avec 8 athlètes médaillés d'or.

## Médaillés des jeux olympiques d'hiver

Cette fois, nous travaillerons sur les médaillés des Jeux Olympiques d'hiver. De la même manière, nous préparons notre base de données et corrigeons les erreurs possibles.

```{r}
sport_hiver <- data.frame(list_tables[2])
```

```{r}
sport_hiver <- sport_hiver[-1,-1]

names(sport_hiver)<-c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or")

sport_hiver[c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")] <- lapply(sport_hiver[c("Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total")], as.integer)

str(sport_hiver)
knitr::kable(head(sport_hiver))
```

Nous allons maintenant chercher à appliquer les fonctions calcul_medailles_individuelles et extraire_nationalite_athlete sur la base de données des Jeux Olympiques d'hiver.

De la même manière que pour les Jeux Olympiques d'été, nous appliquons à l'ensemble du jeu de données la fonction calcul_medailles_individuelles, mais cette fois-ci avec la fonction map du package purrr et non plus la fonction lapply. La principale différence entre les deux fonction est que `map` peut être utilisé avec des structures de données de type liste, vecteur, ou data frame, tandis que `lapply` est spécifiquement conçu pour les listes.

```{r}
resultats_medailles_hiver <- map(sport_hiver$Athletes_medailles, calcul_medailles_individuelles)
head(resultats_medailles_hiver)
```

Nous observons qu'il n'y a pas de différence significative entre les deux fonctions.

Maintenant que la fonction est appliquée à l'ensemble de nos données, on peut chercher quels athlètes ont été le plus médaillés pour les Jeux Olympiques d'hiver.

```{r}
list_medaille_hiver <- list()

for (i in seq_along(resultats_medailles_hiver)) {
  matches <- str_match_all(sport_hiver$Athletes_medailles[i],"([^\\(]+\\s\\([^\\)]+\\))\\s*\\((\\d+)-(\\d+)-(\\d+)\\)")
  
  df<- tibble(
    Athlete = trimws(matches[[1]][,1]),
    Medailles=resultats_medailles_hiver[[i]]
)
  list_medaille_hiver[[i]]<-df
}

top_medailles_hiver<-do.call(rbind,list_medaille_hiver)
knitr::kable(head(top_medailles_hiver))

top_3_medailles_hiver <- head(top_medailles_hiver[order(top_medailles_hiver$Medailles, decreasing = TRUE), ], 3)
knitr::kable(top_3_medailles_hiver)
```

Nous apprenons ainsi que les 3 athlètes avec le plus de médailles sont Marit Bjørgen avec un total de 15 médailles, suivi de Ole Einar Bjørndalen avec 13 médailles, et pour compléter le tableau, Ireen Wüst avec 11 médailles.

Nous allons à présent appliquer la fonction extraire_nationalite_athletes, mais également avec la fonction map du package purrr et non plus la fonction lapply.

```{r}
resultat_nationalite_hiver <- map(sport_hiver$Athletes_or,extraire_nationalite_athlete)

head(resultat_nationalite_hiver)
```

De la même manière que pour la fonction précédente, nous observons qu'il n'y a pas de différence significative entre les deux fonctions.

Maintenant que la fonction est appliquée à l'ensemble de nos données, on peut chercher quels athlètes ont été le plus médaillés pour les Jeux Olympiques d'hiver.

```{r}
list_nationalite_hiver <- list()

for (i in seq_along(sport_hiver$Athletes_or)) {
  matches <- str_match_all(sport_hiver$Athletes_or[i], "\\((\\w{3})\\)")
  
  nationalites_hiver <- matches[[1]][,2]
  
  total_occurrences <- table(nationalites_hiver)
  
  df <- tibble(
    Nationalite = names(total_occurrences),
    Total = as.integer(total_occurrences)
  )
  
  list_nationalite_hiver[[i]] <- df
}

top_nationalites_hiver <- do.call(rbind, list_nationalite_hiver)

top_nationalites_hiver <- aggregate(Total ~ Nationalite, data = top_nationalites_hiver, sum)

top_3_nationalites_hiver <- head(top_nationalites_hiver[order(top_nationalites_hiver$Total, decreasing = TRUE), ], 3)
knitr::kable(top_3_nationalites_hiver)
```

Nous apprenons ainsi que pour les Jeux Olympiques d'hiver, les nationalités les plus présentes pour les médailles d'or sont en premier le Canada avec 8 médaillés, suivis de la Norvège avec 7 et pour finir l'Allemagne avec 6 médaillés d'or.
